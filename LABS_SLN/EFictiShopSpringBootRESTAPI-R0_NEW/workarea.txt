 <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.hiberante</groupId>
                    <artifactId>hiberante-entitymanager</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.hibernate</groupId>
                    <artifactId>hibernate-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpa</artifactId>
            <version>2.7.11</version>
 </dependency>


 package com.demo.repository;

 //INFO : CREATING CUSTOM ANNOTATIONS, USING REFLECTION API (REAL POWER)

 import org.springframework.data.domain.Example;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.repository.query.FluentQuery;

 import java.util.List;
 import java.util.Optional;
 import java.util.function.Function;

 public class EmployeeRepository implements JpaRepository<EmployeeRepository,Integer> {

     @Override
     public List<EmployeeRepository> findAll() {
         return null;
     }

     @Override
     public List<EmployeeRepository> findAll(Sort sort) {
         return null;
     }

     @Override
     public Page<EmployeeRepository> findAll(Pageable pageable) {
         return null;
     }

     @Override
     public List<EmployeeRepository> findAllById(Iterable<Integer> integers) {
         return null;
     }

     @Override
     public long count() {
         return 0;
     }

     @Override
     public void deleteById(Integer integer) {

     }

     @Override
     public void delete(EmployeeRepository entity) {

     }

     @Override
     public void deleteAllById(Iterable<? extends Integer> integers) {

     }

     @Override
     public void deleteAll(Iterable<? extends EmployeeRepository> entities) {

     }

     @Override
     public void deleteAll() {

     }

     @Override
     public <S extends EmployeeRepository> S save(S entity) {
         return null;
     }

     @Override
     public <S extends EmployeeRepository> List<S> saveAll(Iterable<S> entities) {
         return null;
     }

     @Override
     public Optional<EmployeeRepository> findById(Integer integer) {
         return Optional.empty();
     }

     @Override
     public boolean existsById(Integer integer) {
         return false;
     }

     @Override
     public void flush() {

     }

     @Override
     public <S extends EmployeeRepository> S saveAndFlush(S entity) {
         return null;
     }

     @Override
     public <S extends EmployeeRepository> List<S> saveAllAndFlush(Iterable<S> entities) {
         return null;
     }

     @Override
     public void deleteAllInBatch(Iterable<EmployeeRepository> entities) {

     }

     @Override
     public void deleteAllByIdInBatch(Iterable<Integer> integers) {

     }

     @Override
     public void deleteAllInBatch() {

     }

     @Override
     public EmployeeRepository getOne(Integer integer) {
         return null;
     }

     @Override
     public EmployeeRepository getById(Integer integer) {
         return null;
     }

     @Override
     public <S extends EmployeeRepository> Optional<S> findOne(Example<S> example) {
         return Optional.empty();
     }

     @Override
     public <S extends EmployeeRepository> List<S> findAll(Example<S> example) {
         return null;
     }

     @Override
     public <S extends EmployeeRepository> List<S> findAll(Example<S> example, Sort sort) {
         return null;
     }

     @Override
     public <S extends EmployeeRepository> Page<S> findAll(Example<S> example, Pageable pageable) {
         return null;
     }

     @Override
     public <S extends EmployeeRepository> long count(Example<S> example) {
         return 0;
     }

     @Override
     public <S extends EmployeeRepository> boolean exists(Example<S> example) {
         return false;
     }

     @Override
     public <S extends EmployeeRepository, R> R findBy(Example<S> example, Function<FluentQuery.FetchableFluentQuery<S>, R> queryFunction) {
         return null;
     }
 }
